<template >
<safe-area >
	<view class="div" onclick="getQuestionTag" v-if={{nowQuestion.index !== undefined}}>
		<text v-if={{nowQuestion.index + 1}}>{{nowQuestion.index + 1}}.</text>
		<view v-for="(item, index) in nowQuestion.question_desc_rich">
			<image v-if={{item.url}} mode='aspectFit' style={{'height:' + item.height + 'px;width:' + item.width + 'px;'}} src={{remote_host + item.url}}></image>
			<text v-else>{{item.value}}</text>
		</view>
		<text v-if={{nowQuestion.question_source}}>({{nowQuestion.question_source}})</text>
		<text v-if={{isShowSubject}}>
			【{{nowQuestion.question_subject}}】
		</text>
		<text v-if={this.data.multiOpts}>[多选]</text>
	</view>

	<!-- <image class='descPic' mode='aspectFit' v-if={{nowQuestion.question_desc_url && !videoDesc}} src='{{remote_host}}{{nowQuestion.question_desc_url}}'></image>
	 -->
	<view class="view-tag" v-if={{tags !== undefined}}>
        <view class="tag" ><text>测试2</text></view>
		<view class="tag" v-for="item in tags"><text>{{item}}</text></view>
	</view>
	<view class='questionOption' >
		<view :class="options[idx].class" onclick='choseItem' data-choseitem={{idx}} v-for="(item,idx) in options" >
			<text>{{options[idx].optionChar}}、</text>
			<view class="div" v-for="(_item, _index) in item['desc_rich']">
                <text></text>
				<image v-if={{_item.url}} mode='aspectFit' style={{'height:' + _item.height + 'px;width:' + _item.width + 'px;'}} src={{remote_host + _item.url}}></image>
				<text v-else>
					{{_item.value}}
				</text>
			</view>

		</view>
	</view>
	<view v-show={{this.data.showConfirm}} class="btn-warn" onclick="confirmAnswer">
        <text>选好了</text>
    </view>
	<view v-if={{showAnswer}}>
		<view class="deepskyblue">
			<text>参考答案： {{this.data.rightOption}}</text>
			<text>你的答案： {{this.data.selectedOption}}</text>
		</view>
		<scroll-view scroll-y="true" class='analysis'>
            <text>解析：</text>
			<view v-for="(item, index) in nowQuestion.answer_rich">
				<image v-if={{item.url}} mode='aspectFit' style={{'height:' + item.height + 'px;width:' + item.width + 'px;'}} src={{remote_host + item.url}}></image>
				<text v-else>
					{{item.value}}
				</text>
			</view>

		</scroll-view>
	</view>
</safe-area>
</template>
<script>
import app from '../../script/app.js'

var wx = app.wx;
var week_delta = 60 * 60 * 24 * 7;

var globalQuestionNo = -1;
var globalNowQuestion = {};
export default {
	name: 'mp-question',
	// apiready(){//like created
	// },
	data() {
		return{
			// remote_host: "",
			isShowSubject: false,
			// optionChar: app.globalData.optionChar,
			videoDesc: false,  //question_desc_url是否是视频
			options: [], // 题目选项
			multiOpts: false, //是否多选
			rightOpts: [], //正确的选项 下标
			selectedOpts: [], // 选择的选项 下标
			showConfirm: false, // 是否显示 选好了 按钮
			questionAnswer: [], // 答案解析,
            rightOption: "", // 正确答案
			selectedOption: '', // 选择的答案
			erroChoseCls: "errorChose",
			tags: ["测试"], // 题目标签
            // 非小程序 有的
            // 非小程序有的 结束
		}
	},
	computed: {
		nowQuestion: function(){
			if(this.props.nowQuestion == undefined){
				return {};
			}
			var question = this.props.nowQuestion;
            // console.info('-------- update nowQuestion')
			if(question.question_no == globalQuestionNo){
                return question;
            }
			
            var options = question.options;
            var rightOpts = [];
            var multi = false;
            var rightOption = '';
            var selectedOpts = [];
            for (var index=0;index<options.length;index++) {
                options[index].class = 'noChose';
				options[index].optionChar = app.globalData.optionChar[index];
                if (parseInt(options[index]["score"]) > 0) {
                    rightOpts.push(index);
                    rightOption += app.globalData.optionChar[index];
                }
            }
            if (rightOption.length <= 0) {
                rightOption = '无答案';
            }
            if (rightOpts.length > 1) {
                multi = true;
            }
			
            // for (var index in options) {
            //     options[index]["class"] = "noChose";
            // }
			
            if ('selectedOpts' in question) {
                selectedOpts = question.selectedOpts;
                
                for (var i = 0, l = selectedOpts.length; i < l; i++) {
                    var choseIndex = selectedOpts[i];
                    if (parseInt(options[choseIndex]["score"]) > 0) {
                        optionItems[choseIndex]["class"] = "chose";
                    } else {
                        optionItems[choseIndex]["class"] = this.data.erroChoseCls;;
                    }
                }
            }
            if (this.data.mode == 'answer-show') {
                for(var j=0,l=rightOpts.length;j<l;j++){
                    options[rightOpts[j]]["class"] = "chose";
                }
            }
            var videoDesc = false;
            if(question.question_desc_url){
                var _ss = question.question_desc_url.split('.');
                var extension = _ss[_ss.length - 1];
                if(VIDEO_EXTENSIONS.indexOf(extension) >= 0){
                    videoDesc = true;
                }
            }
			// return question;
			
			// var data = {};
			// data['tags'] = [];
            var data = {
                tags: [],
                videoDesc: videoDesc,
                // options: options,
                selectedOpts: selectedOpts,
                rightOption: rightOption,
                multiOpts: multi,
                rightOpts: rightOpts,
                showConfirm: false,
            }
            data['options'] = options;
			this.setData(data);
            if(this.data.showAnswer){
                this.showAnswerAction();
            }

            globalQuestionNo = question.question_no;
			return question;
		},
        examNo: function(){
            return this.props.examNo;
        },
        remote_host: function(){
            return app.globalData.remote_host;
        },
		// options: function(){
        //     if(this.nowQuestion == {}){
        //         return [];
        //     }
        //     return this.nowQuestion.options;
        // },
		showAnswer: function(){
            if(this.props.showAnswer == undefined){
                return false;
            } 
            if(this.props.showAnswer){
                this.showAnswerAction();
            }
			return this.props.showAnswer;
		}
	},
	methods: {
		// start ---非小程序有的方法
		setData(data) {
			// app.print(data);
			for (var key in data) {
				// app.print('-------------------------------' + key)
				this.data[key] = data[key];
			}
		},
		// end --- 非小程序有的数据
		calcTags: function (item) {
            if (item == null) {
                return ['首次遇到'];
            }
            var q_detail = item;
            var tags = [];
            var miss_num = q_detail['miss_num'];
            var num = q_detail['num'];
            var skip_num = q_detail['skip_num'];
            var right_num = num - skip_num - miss_num;
            var state_num = q_detail['state_num'];
            var last_miss = q_detail['last_miss'];
            var last_meet = q_detail['last_meet'];
            var last_meet_time = q_detail['last_meet_time'];
            if (miss_num == 0 && skip_num == 0) {
                tags.push('全部做对')
            } else if (miss_num == 0 && right_num > 0) {
                tags.push('从未错误')
            }
            if (skip_num == num && skip_num >= 3) {
                tags.push('多次跳过')
            } else if (right_num == 0) {
                tags.push('还未对过')
            } else if (state_num >= 3) {
                if (last_miss) {
                    tags.push('连续错误')
                } else {
                    tags.push('最近全对')
                }
            }
            if (right_num >= 1 && miss_num >= 2 * right_num) {
                tags.push('易错题');
            }
            if (last_meet_time - app.get_timestamp2() < week_delta) {
                if (last_meet == STATE_RIGHT) {
                    tags.push('最近做对');
                } else if (last_meet == STATE_WRONG) {
                    tags.push('最近做错');
                }
            }
            app.print(tags)
            return tags

        },
        getQuestionTag: function () {
            
            var tags = [];
            if (this.examNo == null || this.nowQuestion == null) {
                this.setData({
                    tags: tags
                });
                return false;
            }
            if (this.data.showAnswer == true) {
                // 查看答案情况 保持原有
                return true;
            }
            var nowQuestion = this.nowQuestion;
            var examNo = this.examNo;
            var that = this;
            wx.request2({
                url: '/exam/training/tags?exam_no=' + examNo + '&question_no=' + nowQuestion.question_no,
                method: 'GET',
                success: res => {
                    var res_data = res.data;
                    app.print(res_data)
                    if (res_data.status != true) {
                        tags = [];
                    } else if (res_data.data.item == undefined) {
                        tags = [];
                    } else {
                        if (res_data.data.tags !== undefined) {
                            tags = res_data.data.tags;
                        } else {
                            app.print('---------null')
                            
                            tags = that.calcTags(res_data.data.item);
                        }
                    }
                    app.print(tags);
                    that.tags = tags;
                    // that.setData({
                    //     tags: tags
                    // });
                    console.info(that.options)
                },
                fail: function () {
                    that.setData({
                        tags: []
                    });
                }
            })
        },
        choseItem: function (e) {
            if (this.data.mode == 'answer-show') {
                return false;
            }
            var options = this.nowQuestion.options;
            var choseIndex = parseInt(e.currentTarget.dataset.choseitem);
            if (this.data.multiOpts) {
                var selectedOpts = this.data.selectedOpts;
                var _i = this.data.selectedOpts.indexOf(choseIndex);
                if (_i >= 0) {
                    options[choseIndex]["class"] = "noChose";
                    selectedOpts.splice(_i, 1);
                } else {
                    options[choseIndex]["class"] = "chose";
                    selectedOpts.push(choseIndex);
                }
                var showConfirm = selectedOpts.length >= 2 ? true : false;
                this.setData({
                    options: options,
                    selectedOpts: selectedOpts,
                    showConfirm: showConfirm
                })
                return false;
            } else {
                
                for (var index=0;index<options.length;index++) {
                    options[index]["class"] = "noChose";
                }
                options[choseIndex]["class"] = "chose";
                var selectedOpts = [choseIndex];
                this.setData({
                    selectedOpts: selectedOpts,
                    showConfirm: false
                })
                return this.confirmAnswer(options);
            }

        },
        confirmAnswer: function (options) {
            if(options instanceof Array){
                
            }else{
                // 可能是事件触发传过来 event 因此不能用
                options = this.data.options;
            }
            var selectedOpts = this.data.selectedOpts.sort();
            var choseRight = true;
            for (var i = 0, l = options.length; i < l; i++) {
                if (parseInt(options[i]["score"]) > 0) {
                    if (options[i]["class"] != "chose") {
                        if(this.data.mode != 'answer'){
                            options[i]["class"] = "chose";
                        }
                        // TODO 是否区分 用户是否选择
                        choseRight = false;
                    }
                } else if (options[i]["class"] == "chose") {
                    // 用户选错了
                    options[i]["class"] = this.data.erroChoseCls;
                    choseRight = false;
                }
            }
            this.setData({
                options: options
            });
            var eventOptions = {};
            var eventDetail = {
                'selectedOpts': selectedOpts,
                'rightOpts': this.data.rightOpts,
                'choseRight': choseRight
            };
            this.fire('choseOption', eventDetail)
        },
        showAnswerAction: function () {
            
            var selectedOpts = this.data.selectedOpts;
            var selectedOption = '';
            for (var i = 0, l = selectedOpts.length; i < l; i++) {
                selectedOption += app.globalData.optionChar[selectedOpts[i]];
            }
            if (selectedOption.length <= 0) {
                selectedOption = '未选择';
            }
            this.setData({
                selectedOption: selectedOption
            })
        },
        previewImage: function (event) {
            var src = event.currentTarget.dataset.src; //获取data-src
            src += '?r=' + Math.random();
            //图片预览
            wx.previewImage({
                current: src, // 当前显示图片的http链接
                urls: [src], // 需要预览的图片http链接列表
                fail: function (e) {
                    console.info("preview fail");
                },
                complete: function (e) {
                    console.info("preview complete");
                }
            })

        },
	}
}
</script>
<style>
	/* components/showQuestion.wxss */
	/* view {
		display: inherit;
	}  */
	.div {
		display: flex; 
  		flex-direction: row;
		flex-wrap: wrap;
	}
	.view-tag {
		margin-top: 7px;
		margin-bottom: 7px;
	}
	.tag {
		/* border:1px solid; */
		border-radius:7px;
		margin-left: 5px;
		padding-left: 7px;
		padding-right: 7px;
		padding-top: 6px;
		padding-bottom: 6px;
		background-color: #FFBB77	;
	}
	.noChose {
		display: flex; 
  		flex-direction: row;
		flex-wrap: wrap;
		background-color: #f0f5fb;
        height: auto;
		line-height: 35px;
		font-size: 15px;
		margin: 10px 10px 10px 10px;
		padding-left: 10px;
		color: #363637;
		border-radius: 2.5px;
	}
	
	.chose {
		display: flex; 
  		flex-direction: row;
		flex-wrap: wrap;
		background-color: #fff;
		/* DodgerBlue  */
		color: #1E90FF; 
		border: 1px #1E90FF solid;
		line-height: 70px;
		font-size: 15px;
		margin: 10px 10px 10px 10px;
		padding-left: 10px;
		border-radius: 2.5px;
	}

	.errorChose {
		display: flex; 
  		flex-direction: row;
		flex-wrap: wrap;
		background-color: #fff;
		color: #f01212;
		border: 0px #f01212 solid;
		line-height: 34px;
		font-size: 15px;
		margin: 10px 10px 10px 10px;
		padding-left: 10px;
		border-radius: 2px;
	}

	.btn-warn{
		margin-top: 20px;
		margin-bottom: 15px;
		margin-left: 20px;
		/* border: solid 0px ; */
		color: black;
		background-color: #dec674;
		text-align: center;
		padding: 5px;
		width: 75px;
	}

	.analysis{
		margin-top: 10px;
	}

	.deepskyblue {
		color: 	#00BFFF;
	}
</style>