<template>
	<safe-area>
	<hoc-nav-bar-sgm title="练习" />
	<view  class="page">
	<view v-if={{errorMsg != ''}}>
		<view class='button-menu'>
			<text class="error-tip">{{errorMsg}}</text>
		</view>
	</view>
	<view v-else>
		<view class='button-menu'>
			<picker onchange="comprehensiveExerciseChange" class="picker" range={{select_modes}} range-key="name">
				<text class='button button-color1'>综合练习</text>
			</picker>
		</view>
		<view class='button-menu'>
			<picker mode="multiSelector" onchange="subjectExerciseChange" class='picker' range={{subjects_array}} range-key="name">
				<text class='button button-color2'>分科练习</text>
			</picker>
		</view>
		<view class='button-menu' v-if="subjects_array[0]">
			<picker mode="multiSelector" onchange="chapterExerciseChange" class='picker' range={{chapters_array}} oncolumnchange="chapterExerciseColumnChange"  range-key="name" value={{chapter_indexs}}>
				<text class='button button-color3'>章节练习</text>
			</picker>
		</view>
		<view class='button-menu' v-if="sources_array">
			<picker onchange="sourceChange" class='picker' range={{sources_array}} range-key="question_source">
				<text class='button button-color4'>真题练习</text>
			</picker>
		</view>
		<view class='button-menu' v-if="enableVideo">
			<text class='picker button-color6' onclick="toVideo">视频学习</text>
		</view>
		<view class='button-menu' v-if="canUpdate">
			<picker onchange="updateQuestionChange" class='picker' range={{select_modes}} range-key="name">
				<text class='button button-color5'>更新试题</text>
			</picker>
		</view>
	</view>
	</view>
	</safe-area>
</template>
<script>
import '../../components/feature-component/hoc-nav-bar-sgm.stml'
import app from '../../script/app.js'

var wx = app.wx;
var lastExamNo = null;
var lastUpdateSource = 0;
var TIMER_SHOW = null;

export default {
	name: 'training-index',
	apiready() {//like created
		api.setStatusBarStyle({
            style: 'dark',
            color: '#ff5757'
        });
		this.onLoad({});
	},
	data() {
		return {
			select_modes: [], // 对应综合练习菜单 题型
			subjects_array: [
				[],
				[]
			], // 对应分科练习菜单 科目-题型
			chapters_array: [
				[],
				[],
				[]
			], // 对应章节练习菜单 科目-章节-题型
			chapter_indexs: [0, 0, 0],
			sources_array: [], // 对应真题练习 题目来源
			errorMsg: "题库信息加载中...",
			enableVideo: 0,
			canUpdate: false
		}
	},
	methods: {
		// start ---非小程序有的方法
		setData(data) {
			// app.print(data);
			for (var key in data) {
				this.data[key] = data[key];
			}
		},
		// end --- 非小程序有的数据
		onLoad: function (options) {
			var canUpdate = false;
			var currentUser = app.getOrSetCurrentUserData();
			if (currentUser != null && typeof currentUser == "object") {
				if (currentUser.role !== undefined) {
					if ((currentUser.role & 2) == 2) {
						canUpdate = true;
					}
				}
			}
			this.setData({
				canUpdate: canUpdate
			})
			if (options.to !== undefined) {
				this.setData({
					to: options["to"]
				})
			}
			//  非小程序有的方法 加上为了登录成功后，返回能刷新页面
			var that = this;
			api.addEventListener({
				name:'viewappear'
			}, function(ret, err){
				that.onShow();
			});

		},
		onShow: function () {
			var that = this;
			wx.user_ping(function(res){
				if(res.data == undefined){
					that.setData({
						errorMsg: '网络连接异常，请检查网络！'
					})
					setTimeout(function () {
						that.onShow();
					}, 1500);
					return;
				}
				if(res.data.status != true){
					that.setData({
						errorMsg: res.data.data
					})
					return;
				}
				that.refreshExam(false);
			});
		},
		refreshExam(force) {
			app.getDefaultExam();
			var examNo = app.globalData.defaultExamNo;
			if (examNo) {} else {
				wx.showModal({
					title: '未选择题库',
					content: "未选择题库,确定进入【我的】选择题库",
					showCancel: false,
					success(res) {
						wx.switchTab({
							url: "/pages/me/me"
						})
					}
				});
				this.setData({
					errorMsg: '请先选择一个题库'
				})
				return false;
			}
			var nowT = app.get_timestamp2();
			var intervalT = nowT - lastUpdateSource;
			if (intervalT < 300 && lastExamNo == examNo && force == false) {
				return false;
			}
			this.getExam(examNo);
			this.getExamSources(examNo);
		},
		getExam: function (examNo) {
			var that = this;
			wx.request2({
				url: '/exam/info/?exam_no=' + examNo,
				method: 'GET',
				success: res => {
					var resData = res.data.data;
					var errorMsg = '';
					if (res.data.status == false || resData.length <= 0) {
						errorMsg = '未查询到题库详情，切换题库'
						that.setData({
							errorMsg: errorMsg
						})
						return false;
					}
					var examItem = resData[0];
					if (examItem['exam_role'] > 30) {
						errorMsg = '无权限进行操作，请先升级成会员！';
					}
					else if(examItem['exam_role'] <= 3){
						this.setData({
							canUpdate: true
						})
					}
					else{
						this.setData({
							canUpdate: false
						})
					}
					// var select_modes = [{'name': '全部题型', 'value': -1}];
					var select_modes = [];
					if ('select_modes' in examItem) {
						var _select_modes = examItem['select_modes'];
						for (var i = 0; i < _select_modes.length; i++) {
							var _item = _select_modes[i];
							if (_item.enable == true) {
								_item['value'] = i;
								select_modes.push(_item);
							}
						}
					}
					if (select_modes.length <= 0) {
						select_modes.push({
							'name': '全部题型',
							'value': -1
						});
					}
					var subjects_array = [
						[],
						[]
					];
					var subjects = [];
					if (examItem['subjects']) {
						var _subjects = examItem['subjects'];
						for (var i = 0; i < _subjects.length; i++) {
							var _item = _subjects[i];
							if (_item.enable == true) {
								_item['value'] = i;
								if (!'chapters' in _item) {
									_item['chapters'] = [];
								}
								_item['chapters'].unshift({
									'name': '全部章节',
									'enable': true
								});
								subjects.push(_item);
							}
						}
					}
					subjects_array[0] = subjects;
					subjects_array[1] = select_modes;
					var chapters_array = [subjects, [], select_modes];
					if (subjects.length >= 1) {
						chapters_array[1] = subjects[0]['chapters'];
					}
					var enableVideo = examItem.enable_video;
					that.setData({
						errorMsg: errorMsg,
						select_modes: select_modes,
						subjects_array: subjects_array,
						chapters_array: chapters_array,
						enableVideo: enableVideo
					});
					wx.hideLoading();
				},
				fail: res => {
					that.setData({
						errorMsg: '未能成功加载题库信息，检查网络或重试！'
					});
				}
			})
		},
		getExamSources: function (examNo) {
			var that = this;
			wx.request2({
				url: '/exam/questions/sources?exam_no=' + examNo,
				method: 'GET',
				success: res => {
					lastUpdateSource = app.get_timestamp2();
					lastExamNo = examNo;
					var resData = res.data.data;
					var sources = resData['sources'];
					that.setData({
						sources_array: sources
					});
					wx.hideLoading();
				},
				fail: res => {}
			})
		},
		comprehensiveExerciseChange(e) {
			var sm_index = e.detail.value;
			var sm_value = this.data.select_modes[sm_index].value;
			this.startTraining(sm_value, -1, null, null);
		},
		subjectExerciseChange(e) {
			var indexs = e.detail.value;
			var sj_value = this.data.subjects_array[0][indexs[0]].value;
			var sm_value = this.data.subjects_array[1][indexs[1]].value;
			this.startTraining(sm_value, sj_value, null, null);
		},
		chapterExerciseChange: function (e) {
			var indexs = e.detail.value;
			var sj_value = this.data.chapters_array[0][indexs[0]].value;
			var ch_value = null;
			if (indexs[1] > 0) {
				ch_value = this.data.chapters_array[1][indexs[1]].name;
			}
			var sm_value = this.data.chapters_array[2][indexs[2]].value;
			this.startTraining(sm_value, sj_value, ch_value, null);
		},
		chapterExerciseColumnChange (e) {
			var column = e.detail.column;
			var value = e.detail.value;
			var subjects = this.data.chapters_array[0];
			var chapter_indexs = this.data.chapter_indexs;
			var sub_items = [];
			if (column == 0) {
				var subject_item = subjects[value];
				if ('chapters' in subject_item) {
					var chapters = subject_item['chapters'];
					for (var i = 0; i < chapters.length; i++) {
						if (chapters[i].enable) {
							sub_items.push(chapters[i]);
						}
					}
				}
				// chapter_indexs[0] = value;
				// chapter_indexs[1] = 0;
				this.data.chapters_array = [subjects, sub_items, this.data.chapters_array[2]];
				this.data.chapter_indexs = [value, 0, chapter_indexs[2]];
				// this.setData({
				// 	"chapters_array[1]": sub_items,
				// 	"chapter_indexs[0]": value,
				// 	"chapter_indexs[1]": 0
				// })
			}
			else{
				var key1 = 'chapter_indexs[' + column + ']';
				var data = {};
				data[key1] = value;
				this.setData(data)
			}
		},
		sourceChange: function (e) {
			var source_index = e.detail.value;
			var s_value = this.data.sources_array[source_index].question_source;
			this.startTraining(-1, -1, null, s_value);
		},
		updateQuestionChange: function (e) {
			var index = e.detail.value;
			var sm_value = this.data.select_modes[index].value;
			this.startTraining(sm_value, -1, null, null, 'update');
		},
		toVideo(){
			wx.navigateTo({
				url: '../videos/video_index'
			})
		},
		startTraining(sm_value, sj_value, ch_value, source_value, action) {
			var url = "training?from=home";
			if (action == 'update') {
				url = "../questions/question?from=home";
			}
			if (sm_value >= -1) {
				url += "&select_mode=" + sm_value;
			}
			if (sj_value >= 0) {
				url += "&question_subject=" + sj_value;
			}
			if (ch_value != null) {
				url += "&question_chapter=" + ch_value;
			}
			if (source_value != null) {
				url += "&question_source=" + source_value;
			}
			wx.navigateTo({
				url: encodeURI(url)
			})
		},
	}
}
</script>
<style>
.page {
  height: 80vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

.button-menu {
  display: flex;
  width: 300px;
  line-height: 50px;
  margin-left: auto;
  margin-right: auto;
}


.picker{
  width: 80%;
  /* height: 50px; */
  color: #ffffff;
  font-size: 22px;
  line-height: 50px;
  text-align: center;
  margin-left: auto;
  margin-right: auto;
  margin-top: 15px;
}


.button-color1{
  background-color: #fa4545;
  border-radius: 8px;
}

.button-color2{
  background-color: #f19e20;
  border-radius: 8px;
}

.button-color3{
  background-color: #7E3D76;
  border-radius: 8px;
}

.button-color4{
  background-color: #737300;
  border-radius: 8px;
}

.button-color5{
  background-color: #52910b;
  border-radius: 8px;
}

.button-color6{
  background-color: #CE7870;
  border-radius: 8px;
}

.error-tip {
  color: red;
  text-align: center;
}


.button {
  width: 100%;
  height: 50px;
  line-height: 50px;
  text-align: center;
  color: #ffffff;
  font-size: 22px;
}

</style>