<template>
	<safe-area>
	<view class="page" >
		<dialog id="fb_dialog" class="dialog" hidden="{{hiddenFeedback}}"  title="问题反馈" confirm-text="反馈" cancel-text="取消" bindcancel="cancelFeedback" bindconfirm="confirmFeedback">
			<view class="feedback-type">
				<picker range={{fbTypes}} value={{fbTypeIndex}} class="fd-type-picker" bindchange="feedbackTypeChange">
					<text class="fb-type-k">问题类型：</text>
					<!-- <text class="fb-type-v">{{fbTypes[fbTypeIndex]}}</text> -->
				</picker>
			</view>
			<textarea class="fb-desc" type='text' placeholder="" bindinput="feedbackDescInput" maxlength='100' value={{feedbackDesc}}></textarea>
		</dialog>
		<view v-if="showSurvey">
			<statis image4="../../images/wrong.png" titles={{titles}} value1={{rightNum}}  value2={{answerTime}} value3={{skipNum}}/>
			<view class="center">
				<text class="score">{{score}}/{{totalScore}}</text>
				<text class="statis-div-desc">得分</text>
			</view>
			<view class="detail">
				<text class="label-detail">查看解析</text>
				<scroll-view class="width100p">
				<view class='row' v-for="lineNums in  allQuestionIndexs" >
					<view v-for="item in lineNums" onclick='showDeatil' data-index={{ item }} class={{questionItems[item].right? 'bg-right':'bg-error'}}>
						<text class="color-white">{{ item + 1 }}</text>
					</view>
				</view>
				</scroll-view>
			</view>
		</view>
		<view v-else class='pageContent' ontouchstart="touchStart" ontouchend="touchEnd">
		    
			<view class='top'>
				<view class="top-title">
					<text class="">{{examName}}</text>
					<text class="" v-if={{mode == 'wrong'}}>错题本</text>
				</view>
				<!-- <image v-if="examNo && nowQuestion" onclick="feedbackClick" class="icon" src="../../images/feedback.png"></image>
				 -->
			</view>
			<answer-top-process v-if="mode == 'answer'" totalQuestionNumber={{questionNum}} nowQuestionIndex={{nowQuestionIndex}} onreportTime="reportTime"></answer-top-process>
			<view v-if="mode != 'answer'" class='middle'>
				<text v-if={{questionNum>1}} onclick='before10' class='switch'>‹‹</text>
				<picker class="switch" onChange="skipAction" value={{skipIndex}} range={{skipNums}}>
					<text class='switchtext'>{{nowQuestionIndex + 1}}/{{questionNum}}</text>
				</picker>
				<text v-if={{questionNum>1}} onclick='after10' class='switch'>››</text>
			</view>

			<scroll-view class='content' v-if={{nowQuestion != null}}>
				<view id="question_desc"></view>
				<view class="div" onclick="getQuestionTag">
					<text v-if={{nowQuestion.index + 1}}>{{nowQuestion.index + 1}}.</text>
					<view v-for="(item, index) in nowQuestion.question_desc_rich">
						<image v-if={{item.url}} mode='aspectFit' style={{'height:' + item.height + 'px;width:' + item.width + 'px;'}} src={{remote_host + item.url}}></image>
						<text v-if={{!item.url}}>{{item.value}}</text>
					</view>
					<text v-if={{nowQuestion.question_source}}>({{nowQuestion.question_source}})</text>
					<text v-if={{isShowSubject}}>
						【{{nowQuestion.question_subject}}】
					</text>
					<text v-if={this.data.multiOpts}>[多选]</text>
				</view>
				<image class='descPic' mode='aspectFit' v-if={{nowQuestion.question_desc_url && !videoDesc}} src={{remote_host + nowQuestion.question_desc_url}}></image>
				
				<view class="div view-tag">
					<view class="tag" v-for="item in tags"><text>{{item}}</text></view>
				</view>
				<view class='questionOption'>
					<view class={{options[idx].class? options[idx].class:'noChose'}} onclick='choseItem' data-choseitem={{idx}} v-for="(item,idx) in options" :key="item.value" >
						<text>{{options[idx].optionChar}}、</text>
						<view class="div" v-for="(_item, _index) in item['desc_rich']">
							<text></text>
							<image v-if={{_item.url}} mode='aspectFit' style={{'height:' + _item.height + 'px;width:' + _item.width + 'px;'}} src={{remote_host + _item.url}}></image>
							<text v-if={{!_item.url}}>{{_item.value}}</text>
						</view>
					</view>
				</view>
				<view v-show={{this.data.showConfirm}} class="btn-warn" onclick="confirmAnswer">
					<text>选好了</text>
				</view>
				<view class="deepskyblue" v-show={{isShowAnswer}}>
					<text class="deepskyblue">参考答案： {{this.data.rightOption}}</text>
					<text class="deepskyblue">你的答案： {{this.data.selectedOption}}</text>
				</view>
				<scroll-view scroll-y="true" class='analysis' v-show={{isShowAnswer}}>
					<text>解析：</text>
					<view v-for="(item, index) in nowQuestion.answer_rich">
						<image v-if={{item.url}} mode='aspectFit' style={{'height:' + item.height + 'px;width:' + item.width + 'px;'}} src={{remote_host + item.url}}></image>
						<text v-if={{!item.url}}>
							{{item.value}}
						</text>
					</view>
				</scroll-view>
				
			</scroll-view>
		</view>
		<view class='bottom div' v-if={{ mode == 'traning' }}>
			<text v-if={{questionNum>1}} onclick='before1' class='switch'>‹</text>
			<text v-show={{!(isShowAnswer && nowQuestion.canUpdate)}} class='switch' onclick='showAnswer'>显示答案</text>
			<text v-show={{isShowAnswer&&nowQuestion.canUpdate}} class='switch' onclick='toUpdate'>修改</text>
			<text v-if={{questionNum>1}} onclick='after1' class='switch'>›</text>
		</view>
		<view v-if={{ mode == 'wrong' }}>
			<view class='switch' onclick='before1' ><text class="switchtext">‹</text></view>
			<view v-show={{showRemove}} class='switch' onclick='remove'><text class="switchtext">移除该题</text></view>
			<view v-show={{!showRemove}} class='switch' onclick='showAnswer'><text class="switchtext">显示答案</text></view>
			<view class='switch' onclick='after1' ><text class="switchtext">›</text></view>
		</view>
		<view class='bottom div' v-if={{ mode == 'answer' }}>
			<view class='switch' onclick='before1' ><text class="switchtext">‹</text></view>
			<view class='switch' onclick='submit'><text class="switchtext">交卷</text></view>
			<view class='switch' onclick='after1' ><text class="switchtext">›</text></view>
		</view>
		<view class='bottom div' v-if={{ mode == 'answer-show' && showSurvey == false}}>
			<view class='switch' onclick='before1' ><text class="switchtext">‹</text></view>
			<view class='switch' onclick='returnSurvey'><text class="switchtext">返回</text></view>
			<view class='switch' onclick='after1' ><text class="switchtext">›</text></view>
		</view>
	</view>
		
	</safe-area>
</template>
<script>
import app from '../../script/app.js'
import '../answer/answer-top-process.stml'
import '../templates/statis.stml'

var wx = app.wx;
var SE = app.SE;

var that = null;
var questionItems = [];
var touchTime = 0;
var touchStartX = 0; //触摸时的原点
var touchStartY = 0;
var touchInterval = null;
var brushList = new Array();
var brushDetail = new Array();
var STATE_WRONG = 'wrong';
var STATE_RIGHT = 'right'
var STATE_SKIP = 'skip'
var firstEnter = true;

// 原有mp-question 定义
var week_delta = 60 * 60 * 24 * 7;
// 原有mp-question 定义 end


export default {
	name: 'training',
	apiready(){//like created
		var options = api.pageParam;
		this.onLoad(options);
	},
	data() {
		return{
			remote_host: app.globalData.remote_host,
			allExams: [],
			skipNums: [1],
			skipIndex: 0,
			optionChar: app.globalData.optionChar,
			examNo: null,
			examName: "",
			mode: "traning", // 模式 traning 练习模式  wrong 错题模式 answer 测试模式
			questionNum: 0,
			nowQuestionIndex: 0,
			nowQuestion: null,
			isShowAnswer: false,
			showRemove: false, // mode=wrong 是否显示移除按钮
			isShowSubject: false,
			isReq: false,
			progressStorageKey: "",
			nosStorageKey: "",
			hiddenFeedback: true,
			fbTypes: ['题目错误', '答案错误', '解析错误', '其他'],
			fbTypeIndex: 1,
			feedbackDesc: "",
			showAD: false, // 是否显示推广信息
			richAD: [], // 推广信息
			ignoreTip: "",
			ignoreInterval: 0, // 不再提醒的间隔 小时数
			ignoreAd: false, // 一定时间内不再提醒
			// 原有mp-question 定义变量
			isShowSubject: false,
			optionChar: app.globalData.optionChar,
			videoDesc: false,  //question_desc_url是否是视频
			options: [], // 题目选项
			multiOpts: false, //是否多选
			rightOpts: [], //正确的选项 下标
			selectedOpts: [], // 选择的选项 下标
			showConfirm: false, // 是否显示 选好了 按钮
			questionAnswer: [], // 答案解析,
            rightOption: "", // 正确答案
			selectedOption: '', // 选择的答案
			erroChoseCls: "errorChose",
			tags: [], // 题目标签
			// 测试模式使用
			question_subject: null, // 测试模式 使用
			score: 0,
			totalScore: 0,
			showSurvey: false, // 显示测试情况
			titles: ['正确题数', '用时', '跳过题数', '题目解析'],
			rightNum: 0,
			answerTime: '00:00:00',
			skipNum: 0,
			allQuestionIndexs: [],
			refreshTime: false,
		}
	},
	methods: {
		// start ---非小程序有的方法
		setData(data) {
			// app.print(data);
			if(data.options !== undefined){
				this.data.options = [];
			}
			if(data.mode !== undefined){
				var erroChoseCls = 'errorChose';
				if (data.mode == 'answer') {
					data['erroChoseCls'] = 'chose';
				}
				else{
					data['erroChoseCls'] = 'errorChose';
				}
			}
			for (var key in data) {

				this.data[key] = data[key];
			}
		},
		// end --- 非小程序有的数据
		getQuestionNos: function (options) {
			that = this;
			var args_url = "";
			var progressStorageKey = "training";
			if ("select_mode" in options) {
				args_url += "select_mode=" + options["select_mode"] + "&";
				progressStorageKey += "_" + options["select_mode"];
			} else {
				progressStorageKey += "_" + 0;
			}
			if ("question_subject" in options) {
				args_url += "question_subject=" + options["question_subject"] + "&";
				progressStorageKey += "_" + options["question_subject"];
				that.setData({
					isShowSubject: false
				})
				if ("question_chapter" in options) {
					args_url += "question_chapter=" + options["question_chapter"] + "&";
					progressStorageKey += "_" + options["question_chapter"];
				}
			} else {
				progressStorageKey += "_" + 0;
			}
			if ("question_source" in options) {
				args_url += "question_source=" + options["question_source"] + "&";
				progressStorageKey += "_" + options["question_source"];
			}
			var nosStorageKey = progressStorageKey + "_nos"
			this.setData({
				progressStorageKey: progressStorageKey,
				nosStorageKey: nosStorageKey
			});
			var cacheNos = app.getOrSetExamCacheData(nosStorageKey);
			// var cache_questions = that.extractQuestionNos(cacheNos);

			if (cacheNos == null || cacheNos == "" || true) {
				wx.showLoading({
					title: '试题加载中',
				});
			}
			args_url += "exam_no=" + that.data.examNo;
			args_url += "&compress=true"
			wx.request2({
				url: '/exam/questions/no/?' + args_url,
				method: 'GET',
				success: res => {
					if (res.data.status != true) {
						wx.hideLoading();
						wx.showModal({
							title: '无法访问题库',
							content: "题库已删除，或无权访问。确定进入【我的】更换题库",
							showCancel: false,
							success(res) {
								wx.switchTab({
									url: "/pages/me/me"
								})
							}
						})
						return
					}
					var _questions = that.extractQuestionNos(res.data.data['nos']);
					// for(var q_index=0;q_index<_questions.length;q_index++){
					//     cache_questions.push(_questions[q_index]);
					// }
					// app.getOrSetExamCacheData(nosStorageKey, cache_questions);
					questionItems = _questions
					that.setData({
						questionNum: _questions.length
					})
					if (_questions.length <= 0) {
						wx.hideLoading();
						wx.showModal({
							title: '无题目',
							content: "无相关题目，确定返回",
							showCancel: false,
							success(res) {
								wx.switchTab({
									url: "/pages/me/me"
								})
							}
						})
					} else {
						// 请求questionItems
						var progressIndex = app.getOrSetExamCacheData(that.data.progressStorageKey);
						if (progressIndex == null || typeof progressIndex != 'number' || progressIndex <= 0) {
							progressIndex = 0;
						}
						that.reqQuestion(progressIndex, true);
					}
				}
			})
		},
		onLoad: function (options) {
			brushList = [];
			brushDetail = [];
			questionItems = [];
			app.getDefaultExam();
			this.setData({
				examNo: app.globalData.defaultExamNo,
				examName: app.globalData.defaultExamName
			});
			that = this;
			SE.startSecurityMonitor();
			if (that.data.examNo != null) {
				var questionNo = null;
				if ('question_no' in options) {
					questionNo = parseInt(options['question_no']);
					if (isNaN(questionNo)) {
						questionNo = null;
					} else {
						questionItems = [{
							'question_no': questionNo
						}];
						that.setData({
							questionNum: 1
						})
						this.reqQuestion(0, true);
						return true;
					}
				} else if ('wrong_question' in options) {
					this.enterWrongMode();
					return true;
				}
				else if('answer' in options){
					this.enterAnswerMode(options);
					return true;
				}

				that.getQuestionNos(options);
			} else {
				wx.showModal({
					title: '未选择题库',
					content: "未选择题库,确定进入【我的】选择题库",
					showCancel: false,
					success(res) {
						wx.switchTab({
							url: "/pages/me/me"
						})
					}
				})
			}

		},
		onShow: function () {
			// this.getExamAD();
		},
		extractQuestionNos: function (nos_l) {
			if (typeof nos_l == "string" || nos_l == null) {
				return [];
			}
			var items = [];
			var ll = nos_l.length;
			for (var i = 0; i < ll; i++) {
				var ll_item = nos_l[i];
				for (var j = 0; j < ll_item[1]; j++) {
					var q_item = {
						'question_no': ll_item[0] + j
					}
					items.push(q_item);
				}
			}
			return items
		},
		reqQuestion: function (startIndex, updateShow = false, stepNum = 13) {
			that = this;
			var exam_no = that.data.examNo;
			if (that.data.examNo == null) {
				console.info("Can not req, examNo is null");
				return false;
			}
			var isReq = that.data.isReq;
			if (isReq == true) {
				return false;
			} else {
				that.setData({
					isReq: true
				})
			}

			var nos = "";
			var _start = -1;
			var _end = -1;
			// startIndex 可能超出最大题目长度
			if (startIndex >= questionItems.length) {
				startIndex = questionItems.length - 1;
			}
			if (stepNum < 0) {
				_start = startIndex + stepNum;
				_end = startIndex + 1
			} else {
				_start = startIndex;
				_end = startIndex + stepNum;
			}
			if (_end > questionItems.length) {
				_end = questionItems.length;
			}
			if (_start < 0) {
				_start = 0
			}
			for (var i = _start; i < _end; i++) {
				if (("options" in questionItems[i]) && questionItems[i].forceUpdate != true) {
					continue;
				}
				nos += "," + questionItems[i].question_no;
			}
			wx.request2({
				url: '/exam/questions/?fmt_version=2&exam_no=' + exam_no + "&nos=" + nos,
				method: 'GET',
				success: res => {
					wx.hideLoading();
					if (res.data.status != true) {
						// TODO show
						return;
					}
					if ('se' in res.data) {
						var r = SE.showSecurityMesg(res.data.se.action, res.data.se.message);
						if (r) {
							return false;
						}
					}
					var canUpdate = false;
					if ('exam' in res.data) {
						var exam_item = res.data.exam;

						if (exam_item.exam_role <= 3) {
							canUpdate = true;
						}
					}
					var newItems = res.data.data;
					for (var i = _end - 1; i >= _start; i--) {
						for (var j = 0; j < newItems.length; j++) {
							if (questionItems[i].question_no == newItems[j].question_no) {
								questionItems[i]["question_desc"] = newItems[j]["question_desc"];
								questionItems[i]["question_desc_rich"] = newItems[j]["question_desc_rich"]
								questionItems[i]["question_desc_url"] = newItems[j]["question_desc_url"];
								questionItems[i]["options"] = newItems[j]["options"];
								questionItems[i]["answer_rich"] = newItems[j]["answer_rich"];
								questionItems[i]["question_source"] = newItems[j]["question_source"];
								questionItems[i].multi = newItems[j].multi;
								questionItems[i].forceUpdate = false;
								questionItems[i].canUpdate = canUpdate
								break;
							}
						}
					}
					// 判断 是否questionItems有题
					if (questionItems.length <= 0) {
						// 没有错题 有问题
					}
					if (updateShow) {
						that.setData({
							questionNum: questionItems.length
						});
						that.changeNowQuestion(startIndex);
					} else if (startIndex == that.data.nowQuestionIndex) {
						// 如果当前请求的内容正好是当前显示的，需要重新更新一下答案显示。答案显示是拼出来的没和变量关联
						if (that.data.isShowAnswer) {
							that.showAnswer();
						}
					}
					that.setData({
						isReq: false
					})
				},
				fail: function ({
					errMsg
				}) {
					wx.hideLoading();
					console.log('request fail', errMsg)
					that.setData({
						isReq: false
					})
				}
			})
		},
		after: function (afterNum) {
			var nowQuestion = that.data.nowQuestion;
			var nowQuestionIndex = that.data.nowQuestionIndex;
			var questionLen = questionItems.length;
			var nextIndex = nowQuestionIndex + afterNum;
			if (nowQuestionIndex >= questionItems.length - 1) {
				if(this.data.mode == 'answer'){
					this.submit();
					return
				}
				// 判断是否当前是否是最后一题
				wx.showModal({
					title: "已是最后一题",
					content: "是否从头开始练习？",
					showCancel: true,
					icon: "none",
					success: function (res) {
						if (res.confirm) {
							that.reqQuestion(0, true)
						}
					}
				});
				return true;
			}
			if (nextIndex >= questionItems.length) {
				nextIndex = questionItems.length - 1;
			}
			if ("options" in questionItems[nextIndex]) {
				//已经获取内容
				that.changeNowQuestion(nextIndex);
				// 判断紧接着10条是否都已预获取数据
				for (var i = 1; i < 11 && nextIndex + i < questionLen; i++) {
					if (!("options" in questionItems[nextIndex + i])) {
						that.reqQuestion(nextIndex + i);
						break;
					}
				}
			} else {
				// 没有获取内容
				wx.showLoading({
					title: '加载中...',
					mask: true
				})
				that.reqQuestion(nextIndex, true)
			}
		},
		after1: function () {
			that.after(1);
		},

		after10: function () {
			that.after(10);
		},
		before: function (preNum) {
			var nowQuestion = that.data.nowQuestion;
			var nowQuestionIndex = that.data.nowQuestionIndex;
			var preIndex = nowQuestionIndex - preNum;
			if (nowQuestionIndex <= 0) {
				// 判断是否当前是否是第一题
				wx.showToast({
					title: "已是第一题",
					icon: "none",
					duration: 1000
				});
				return true;
			}
			if (preIndex <= 0) {
				preIndex = 0;
			}
			if ("options" in questionItems[preIndex]) {
				//已经获取内容
				that.changeNowQuestion(preIndex);
			} else {
				// 没有获取内容
				wx.showLoading({
					title: '加载中...',
					mask: true
				})
				that.reqQuestion(preIndex, true, -13)
			}

		},
		before1: function () {
			that.before(1)
		},

		before10: function () {
			that.before(10)
		},
		setSkipNums(num, end_num) {
			var max_times = 5;
			var skipIndex = 0;
			var _num = num;
			var interval = 10;
			var r = [];
			var times = 0;
			var p_num = 0
			while (num > 1) {
				p_num = num - interval;
				if (p_num > 1)
					r.push(p_num)
				else {
					r.push(1)
					break
				}
				times += 1
				if (times >= max_times) {
					interval *= 10;
					times = 0;
				}

				num = p_num;
			}
			r.sort(function (a, b) {
				return a - b;
			});
			r.push(_num);
			skipIndex = r.length - 1;
			num = _num;
			interval = 10;
			times = 0;
			while (num < end_num) {
				p_num = num + interval
				if (p_num >= end_num) {
					r.push(end_num);
					break
				} else {
					r.push(p_num);
				}
				times += 1;
				if (times >= max_times) {
					interval *= 10;
					times = 0;
				}
				num = p_num;
			}
			this.setData({
				skipNums: r,
				skipIndex: skipIndex
			})
			return r;

		},
		skipAction: function (e) {
			var index = e.detail.value;
			this.changeNowQuestion(this.data.skipNums[index] - 1);
		},
		changeNowQuestion: function (index) {
			var nowQuestion = questionItems[index];
			
			if ("options" in nowQuestion) {
				//已经获取内容
			} else {
				// 没有获取内容
				wx.showLoading({
					title: '加载中...',
					mask: true
				})
				that.reqQuestion(index, true);
				return;
			}
			nowQuestion.index = index;
			var isShowAnswer = false;
			if(this.data.mode == 'answer-show'){
				isShowAnswer = true;
			}
			this.setData({
				nowQuestion: nowQuestion,
				nowQuestionIndex: index,
				isShowAnswer: isShowAnswer,
				showRemove: false,
				feedbackDesc: ""
			})
			this.calcNowQuestion(nowQuestion);
			this.setSkipNums(index + 1, questionItems.length);
			this.saveTrainingProcess();
		},
		showAnswer: function (e) {
			var nowQuestion = this.data.nowQuestion;
			if (nowQuestion == null) {
				return false;
			}
			this.addBrushNum(nowQuestion.question_no, STATE_SKIP);
			this.setData({
				isShowAnswer: true,
			})
			this.showAnswerAction();
		},
		toUpdate: function (e) {
			var nowQuestion = that.data.nowQuestion;
			if (nowQuestion == null) {
				return false;
			}
			var question_no = nowQuestion.question_no;
			wx.navigateTo({
				url: "../questions/question?select_mode=-1&question_no=" + question_no
			})
		},
		choseOption: function (e) {
			var choseRight = e.detail.choseRight;
			var selectedOpts = e.detail.selectedOpts;

			var nowQuestion = that.data.nowQuestion;
			
			var showRemove = false;
			if (this.data.mode == 'wrong') {
				if (choseRight) {
					this.addBrushNum(nowQuestion.question_no, STATE_RIGHT);
					showRemove = true;
				} else {
					this.addBrushNum(nowQuestion.question_no, STATE_WRONG);
				}
				this.setData({
					showRemove: showRemove
				})
				// 显示答案
				this.showAnswer();
				return;
			}
			if(this.data.mode == 'answer'){
				var nowQuestionIndex = this.data.nowQuestionIndex;
				var nextQuestionNumber = nowQuestionIndex + 1;
				questionItems[nowQuestionIndex]["right"] = choseRight;
        		questionItems[nowQuestionIndex]["selectedOpts"] = selectedOpts;
				if (nextQuestionNumber == questionItems.length) {
					this.submit();
				} else {
					var interval = setInterval(function () {
						clearInterval(interval)
						that.after1();
					}, 1000)

				}
				return;
			}
			if (choseRight) {
				this.addBrushNum(nowQuestion.question_no, STATE_RIGHT);
				// 自动进入下一题
				if (this.data.isShowAnswer == false) {
					// 当前显示答案 不进入下一题
					var interval = setInterval(function () {
						clearInterval(interval)
						that.after1();
					}, 1000)
				}
				else{
					this.showAnswer();
				}
			} else {
				// 记录错题
				this.addBrushNum(nowQuestion.question_no, STATE_WRONG);
				// 显示答案
				this.showAnswer();
			}

		},

		previewImage: function (event) {
			var src = event.currentTarget.dataset.src; //获取data-src
			src += '?r=' + Math.random();
			//图片预览
			wx.previewImage({
				current: src, // 当前显示图片的http链接
				urls: [src], // 需要预览的图片http链接列表
				fail: function (e) {
					console.info("preview fail");
				},
				complete: function (e) {
					console.info("preview complete");
				}
			})

		},
		addBrushNum: function (q_no, state) {
			if (brushList.indexOf(q_no) >= 0) {
				return false;
			}
			brushList.push(q_no);
			brushDetail.push({
				'no': q_no,
				'state': state
			});
			this.saveBrushNum();
		},
		saveBrushNum: function () {
			if (brushDetail.length <= 0) {
				return false;
			}
			var _num = brushDetail.length;
			var questions = new Array();
			while (brushDetail.length > 0) {
				questions.push(brushDetail.pop());
			}
			var examNo = this.data.examNo;
			brushDetail = new Array();
			var data = {
				'exam_no': examNo,
				'num': _num,
				'questions': questions
			}
			wx.request2({
				url: '/exam/usage?exam_no=' + examNo,
				method: 'POST',
				data: data,
				success: res => {},
				fail: function () {
					brushDetail = brushDetail.concat(questions);
				}
			})
		},
		getFeedback: function(){
			var question_no = this.data.nowQuestion.question_no;
			var url = '/exam/question/feedback?exam_no=' + this.data.examNo;
			url += '&question_no=' + question_no;
			url += '&max_state=0&user=';
			var that = this;
			wx.request2({
				url: url,
				method: 'GET',
				success: res => {
					if (res.data.status != true) {
					} else {
						var items = res.data.data;
						if(items.length > 0){
							var fbTypeIndex = that.data.fbTypes.indexOf(items[0].fb_type);
							if(fbTypeIndex < 0){
								fbTypeIndex = 0;
							}
							that.setData({
								fbTypeIndex: fbTypeIndex,
								feedbackDesc: items[0].description
							})
						}
					}

				}
			})
		},
		feedbackClick: function () {
			this.setData({
				hiddenFeedback: false
			});
			$('#fb_dialog').showModal();
			this.getFeedback();
		},
		feedbackTypeChange(e) {
			this.setData({
				fbTypeIndex: e.detail.value
			})
		},
		feedbackDescInput: function (e) {
			this.setData({
				feedbackDesc: e.detail.value
			});
		},
		cancelFeedback: function () {
			this.setData({
				hiddenFeedback: true
			});
		},
		confirmFeedback: function (e) {
			this.setData({
				hiddenFeedback: true
			});
			var fb_type = this.data.fbTypes[this.data.fbTypeIndex]
			var questionNo = this.data.nowQuestion.question_no;
			var data = {
				'description': this.data.feedbackDesc,
				'fb_type': fb_type,
				'question_no': questionNo
			};
			var that = this;
			wx.request2({
				url: '/exam/question/feedback?exam_no=' + this.data.examNo,
				method: 'POST',
				data: data,
				success: res => {
					if (res.data.status != true) {
						wx.showModal({
							title: '反馈失败',
							content: "反馈失败，请稍后重试！",
							showCancel: false,
							success(res) {}
						})

						return
					} else {
						wx.showToast({
							title: "反馈成功"
						})
					}

				}
			})
		},
		saveTrainingProcess() {
			if (that.data.examNo == null || that.data.nowQuestion == null) {
				return false;
			}
			if (this.data.progressStorageKey == "" || this.data.nowQuestionIndex <= 0) {
				return false;
			}
			app.getOrSetExamCacheData(this.data.progressStorageKey, this.data.nowQuestionIndex);

		},
		getExamAD: function () {
			if (this.data.examNo == null) {
				return false;
			}
			var now_time = dt.get_timestamp2();
			var cache_key = 'ignore_ad_time';
			var ignore_time = app.getOrSetExamCacheData(cache_key);
			if (ignore_time > now_time) {
				return false;
			}
			var that = this;
			wx.request2({
				url: '/exam/ad?exam_no=' + this.data.examNo,
				success: function (ret) {
					var r_data = ret.data;
					if (!r_data.status) {
						return false;
					}
					if (r_data.data.enabled == false) {
						return false;
					}
					var ignoreTip = "";

					if (r_data.data.ignore_interval > 0) {
						var days = Math.floor(r_data.data.ignore_interval / 24);
						if (days > 0) {
							ignoreTip = days + "天内不再提醒";
						} else {
							ignoreTip = r_data.data.ignore_interval + "小时内不再提醒";
						}
					}
					that.setData({
						showAD: true,
						richAD: r_data.data.ad_desc_rich,
						ignoreTip: ignoreTip,
						ignoreInterval: r_data.data.ignore_interval
					})

				}
			})
		},
		ignoreAction: function (e) {
			var ignoreAd = false;
			for (let i = 0, l = e.detail.value.length; i < l; ++i) {
				if (e.detail.value[i] == 'ignore') {
					ignoreAd = true;
					break
				}
			}
			this.setData({
				ignoreAd: ignoreAd
			})
		},
		knowAd: function () {
			if (this.data.ignoreAd) {
				var now_time = dt.get_timestamp2();
				var cache_key = 'ignore_ad_time';
				var ignore_time = now_time + this.data.ignoreInterval * 3600;
				app.getOrSetExamCacheData(cache_key, ignore_time);
			}
			this.setData({
				showAD: false,
			})
		},
		// 练习错题模式
		enterWrongMode: function () {
			this.setData({
				mode: 'wrong'
			});
			this.reqWrongAnswer();
		},
		reqWrongAnswer: function () {
			that = this
			var examNo = this.data.examNo;
			if (examNo == null) {
				return false;
			}
			var questionLen = questionItems.length;
			var minWrongTime = 0;
			if (questionLen <= 0) {
				wx.showLoading({
					title: '加载错题中...',
				})
			} else {
				minWrongTime = questionItems[questionLen - 1].wrong_time;
			}
			
			wx.request2({
				url: '/exam/wrong/?exam_no=' + examNo + "&min_wrong_time=" + minWrongTime,
				methods: "GET",
				success: function (res) {
					if (res.data.status != true) {
						wx.hideLoading();
						wx.showModal({
							title: '无法访问题库',
							content: "题库已删除，或无权访问。确定进入【我的】更换题库",
							showCancel: false,
							success(res) {
								wx.switchTab({
									url: "/pages/me/me"
								})
							}
						})
						return false;
					}
					var addQuestionItems = res.data.data;
					// 如果有新的错题，显示第一个，没有保持原来的显示
					var showIndex = that.data.nowQuestionIndex;
					var latestQuestionItems = questionItems;
					if (addQuestionItems.length > 0) {
						// 按照错误时间排序 最新错题排到前面
						addQuestionItems.sort(function (a, b) {
							return a.wrong_time - b.wrong_time;
						})
						latestQuestionItems = addQuestionItems.concat(questionItems);
						showIndex = 0;
					}
					// 判定最新的试题是否在
					questionItems = latestQuestionItems;
					wx.hideLoading();
					if (questionItems.length <= 0 && firstEnter) {
						wx.showModal({
							title: '无错题',
							content: "没有发现错题",
							showCancel: false,
							success(res) {
								// wx.navigateBack({
								//     delta: 1
								// })
							}
						})
						firstEnter = false;
						return false;
					}
					if (addQuestionItems.length > 0) {
						// 请求questionItems
						that.reqQuestion(0, true);
					}
				},
				fail: function ({
					errMsg
				}) {
					wx.hideLoading();
					wx.showModal({
						title: '页面请求失败',
						content: "无法连接远程主机获取错题信息，确定返回首页",
						showCancel: false,
						success(res) {
							wx.navigateBack({
								delta: 1
							})
						}
					})
				}
			})
		},
		remove: function() {
			var nowQuestion = that.data.nowQuestion;
			var nowQuestionIndex = that.data.nowQuestionIndex;
			var questionLen = questionItems.length;
			wx.request2({
				url: '/exam/wrong/?exam_no=' + that.data.examNo,
				method: "DELETE",
				data: {
					"question_no": nowQuestion.question_no
				},
				success: function(res) {
				}
			})
			questionItems.splice(nowQuestionIndex, 1);
			questionLen = questionItems.length;
			that.setData({
				questionNum: questionLen
			})
			if (questionLen <= 0) {
				questionItems = [];
				wx.showModal({
					title: '无错题',
					content: "已经没有错题",
					showCancel: false,
					success(res) {
						wx.navigateBack({
							delta: 1
						})
					}
				})
				return true;
			}
			
			if (nowQuestionIndex >= questionLen) {
				nowQuestionIndex = questionLen - 1;
			}
			this.changeNowQuestion(nowQuestionIndex);
			

		},
		// 练习错题模式 结束
		// 测试模式 开始
		enterAnswerMode: function(options){
			var question_subject = null;
			if ("question_subject" in options) {
				question_subject = options["question_subject"];
			}
			this.setData({
				mode: 'answer',
				question_subject: question_subject,
			});
			if ("strategy_id" in options) {
                this.getStrategy(this.data.examNo, options["strategy_id"]);
            } else {
                var strategy_items = [{
                    'num': 20,
                    'value': -1
                }];
                if ("select_mode" in options) {
                    strategy_items[0]['value'] = options["select_mode"];
                }

                this.getQuestionbyStrategy(strategy_items);
            }
		},
		getStrategy(examNo, strategy_id) {
			var that = this;
			wx.request2({
				url: '/exam/strategy/' + examNo,
				method: 'GET',
				success: res => {
					wx.hideLoading();
					var resData = res.data.data;
					var strategies = resData['strategies'];
					for (var i = 0; i < strategies.length; i++) {
						if (strategies[i].strategy_id == strategy_id) {
							var strategy_items = strategies[i]["strategy_items"];
							var questionNum = 0
							for (var j = 0; j < strategy_items.length; j++) {
								questionNum += strategy_items[j]['num'];
							}
							that.setData({
								questionNum: questionNum
							})
							that.getQuestionbyStrategy(strategy_items);
							wx.showLoading({
								title: '组卷中...',
							})
							return;
						}
					}
					wx.showModal({
						title: '组卷策略不存在',
						content: "请返回重试！",
						showCancel: false,
						success(res) {
							wx.navigateBack({
								delta: 1
							})
						}
					})
					return;
				},
				fail: res => {
					wx.showModal({
						title: '访问失败',
						content: "请稍后重试！",
						showCancel: false,
						success(res) {
							wx.navigateBack({
								delta: 1
							})
						}
					})
					return;
				}
			})
		},
		getQuestionbyStrategy(strategy_items) {
			var that = this;
			for (var i = 0; i < strategy_items.length; i++) {
				var item = strategy_items[i];
				if ('loaded' in item) {
					continue;
				} else {
					var exclude_nos = "";
					var existItems = questionItems;
					for (var k = 0; k < existItems.length; k++) {
						var _item = existItems[k];
						if (_item['select_mode'] == item['value']) {
							exclude_nos += "," + _item['question_no'];
						}
					}
					var url = '/exam/questions/?fmt_version=2&exam_no=' + that.data.examNo + "&num=" + item["num"];
					console.info(url);
					if (exclude_nos != "") {
						url += "&exclude_nos=" + exclude_nos;
					}
					url += "&select_mode=" + item["value"];
					if (this.data.question_subject != null) {
						url += "&question_subject=" + this.data.question_subject;
					}
					wx.request2({
						url: url,
						method: 'GET',
						success: res => {
							if (res.data.status == false) {
								wx.hideLoading();
								wx.showModal({
									title: '无法访问题库',
									content: "题库已删除，或无权访问。确定进入【我的】更换题库",
									showCancel: false,
									success(res) {
										wx.switchTab({
											url: "/pages/me/me"
										})
									}
								})
								return;
							}
							// var questionItems = res.data.data;
							var oldItems = questionItems;
							questionItems = oldItems.concat(res.data.data)
							var data = {
							};
							if (that.data.nowQuestion == null && questionItems.length > 0) {
								that.changeNowQuestion(0);
								// data['nowQuestion'] = questionItems[0];
								// data['nowQuestion']['displayed'] = true;
								wx.hideLoading();
							}
							that.setData(data);
							item['loaded'] = true;
							that.getQuestionbyStrategy(strategy_items);
						},
						fail: res => {
							setTimeout(function () {
								that.getQuestionbyStrategy(strategy_items);
							}, 10000);

						}
					})
					return;
				}
			}
			// var questionItems = this.data.questionItems;
			if (questionItems.length <= 0) {
				wx.hideLoading();
				wx.showModal({
					title: '无试题',
					content: "暂无相关试题，请重新选择试题类型或者更换试题库",
					showCancel: false,
					success(res) {
						wx.navigateBack({
							delta: 1
						})
					}
				})
				return;
			}
			if (questionItems.length != this.data.questionNum) {
				this.setData({
					questionNum: questionItems.length
				})
			}
		},
		submit: function () {
			if (this.data.mode != 'answer') {
				wx.showToast({
					title: '已是最后一题',
				})
				return false;
			}
			var msg = '确定要交卷吗？';
			if (questionItems.length != this.data.questionNum) {
				msg = '题目信息都没加载完，确定要交卷吗？';
			}
			wx.showModal({
				title: '交卷',
				content: msg,
				success(res) {
					if (res.confirm) {
						var timestamp = (new Date()).valueOf()
						var test_id = app.globalData.testIdPrefix + that.data.examNo + "_" + timestamp;
						wx.setStorageSync(test_id, questionItems);
						var allTestIds = wx.getStorageSync(app.globalData.allTestIdKey)
						if (allTestIds) {
							allTestIds = allTestIds + "," + test_id;
						} else {
							allTestIds = test_id;
						}
						wx.setStorage({
							key: app.globalData.allTestIdKey,
							data: allTestIds,
						})
						that.setResult();
					}
				}
			})

		},
		setResult: function () {
			// clearInterval(TIMER_USE);
			// var questionItems = this.data.questionItems;
			var questionNum = questionItems.length;
			var score = 0;
			var skipNum = 0;
			var showNums = [];
			// var wrong_question = [];
			var questions = [];
			for (var i = 0; i < questionNum;) {
				var lineNums = [];
				for (var j = 0; j < 5 && i < questionNum; i++, j++) {
					lineNums.push(i);
					if (!('displayed' in questionItems[i])) {
						skipNum += 1;
						continue;
					}
					if (!('right' in questionItems[i])) {
						questions.push({
							'no': questionItems[i].question_no,
							'state': STATE_SKIP
						})
						skipNum += 1;
						continue;
					}
					if (questionItems[i]["right"] == true) {
						score = score + 1;
						questions.push({
							'no': questionItems[i].question_no,
							'state': STATE_RIGHT
						})
					} else if (questionItems[i]["right"] == false) {
						questions.push({
							'no': questionItems[i].question_no,
							'state': STATE_WRONG
						})
						// wrong_question.push(res.data[i]["question_no"]);
					}

				}
				showNums.push(lineNums);
			}
			that.setData({
				allQuestionIndexs: showNums,
				score: score,
				totalScore: questionNum,
				mode: 'answer-show',
				isShowAnswer: true,
				showSurvey: true,
				rightNum: score,
				skipNum: skipNum,
				refreshTime: true,
			})
			for(var i=0;i<questions.length;i++){
				this.addBrushNum(questions[i].no, questions[i].state);
			}
			that.saveBrushNum();
		},
		reportTime: function(e){
			var detail = e.detail;
			if(this.data.mode == 'answer'){
				this.setData(detail);
				return true;
			}
			return false;
		},
		showDeatil: function (e) {
			var index = e.currentTarget.dataset.index;
			this.setData({
				showSurvey: false
			})
			this.changeNowQuestion(index);
		},
		returnSurvey: function (e) {
			this.setData({
				showSurvey: true
			})
		},
		// 测试模式 结束
		onUnload: function () {
			this.saveBrushNum();
			this.saveTrainingProcess();
		},
		// 触摸开始事件
		touchStart: function (e) {
			// touchStartX = e.touches[0].pageX; // 获取触摸时的原点
			// touchStartY = e.touches[0].pageY;
			touchStartX = e.detail.x;
			touchStartY = e.detail.y;
			// 使用js计时器记录时间    
			touchInterval = setInterval(function () {
				touchTime++;
			}, 100);
		},
		// 触摸结束事件
		touchEnd: function (e) {
			if (this.data.questionNum <= 1) {
				return false
			}
			// var touchEndX = e.changedTouches[0].pageX;
			// var touchEndY = e.changedTouches[0].pageY;
			var touchEndX = e.detail.x;
			var touchEndY = e.detail.y;
			var touchMoveX = touchEndX - touchStartX;
			var touchMoveY = touchEndY - touchStartY;

			var absMoveX = Math.abs(touchMoveX);
			var absMoveY = Math.abs(touchMoveY);
			var wChange = true;
			if (absMoveY > 0.3 * absMoveX || absMoveY > 30) {
				wChange = false;

			}

			if (wChange) {
				// 向左滑动   
				if (touchMoveX <= -93 && touchTime < 10) {
					//执行切换页面的方法
					that.after1();
				}
				// 向右滑动   
				else if (touchMoveX >= 93 && touchTime < 10) {
					that.before1();
				}
			}

			clearInterval(touchInterval); // 清除setInterval
			touchTime = 0;
		},
		// 原有mp-question 里的方法
		calcNowQuestion: function(nowQuestion){
			if(nowQuestion == undefined){
				return false;
			}
			var question = nowQuestion;
            var options = question.options;
            var rightOpts = [];
            var multi = false;
            var rightOption = '';
            var selectedOpts = [];
            for (var index=0;index<options.length;index++) {
                options[index].class = 'noChose';
				options[index].optionChar = app.globalData.optionChar[index];
                if (parseInt(options[index]["score"]) > 0) {
                    rightOpts.push(index);
                    rightOption += app.globalData.optionChar[index];
                }
            }
            if (rightOption.length <= 0) {
                rightOption = '无答案';
            }
            if (rightOpts.length > 1) {
                multi = true;
            }
            if ('selectedOpts' in question) {
                selectedOpts = question.selectedOpts;
                
                for (var i = 0, l = selectedOpts.length; i < l; i++) {
                    var choseIndex = selectedOpts[i];
                    if (parseInt(options[choseIndex]["score"]) > 0) {
                        options[choseIndex]["class"] = "chose";
                    } else {
                        options[choseIndex]["class"] = this.data.erroChoseCls;;
                    }
                }
            }
            if (this.data.mode == 'answer-show') {
                for(var j=0,l=rightOpts.length;j<l;j++){
                    options[rightOpts[j]]["class"] = "chose";
                }
            }
            var videoDesc = false;
            if(question.question_desc_url){
                var _ss = question.question_desc_url.split('.');
                var extension = _ss[_ss.length - 1];
                if(VIDEO_EXTENSIONS.indexOf(extension) >= 0){
                    videoDesc = true;
                }
            }
            var data = {
				remote_host: app.globalData.remote_host,
                tags: [],
                videoDesc: videoDesc,
                // options: options,
                selectedOpts: selectedOpts,
                rightOption: rightOption,
                multiOpts: multi,
                rightOpts: rightOpts,
                showConfirm: false,
            }
            data['options'] = options;
			this.setData(data);
            if(this.data.isShowAnswer){
                this.showAnswerAction();
            }
			question.displayed = true;
			return true;
		},
		calcTags: function (item) {
            if (item == null) {
                return ['首次遇到'];
            }
            var q_detail = item;
            var tags = [];
            var miss_num = q_detail['miss_num'];
            var num = q_detail['num'];
            var skip_num = q_detail['skip_num'];
            var right_num = num - skip_num - miss_num;
            var state_num = q_detail['state_num'];
            var last_miss = q_detail['last_miss'];
            var last_meet = q_detail['last_meet'];
            var last_meet_time = q_detail['last_meet_time'];
            if (miss_num == 0 && skip_num == 0) {
                tags.push('全部做对')
            } else if (miss_num == 0 && right_num > 0) {
                tags.push('从未错误')
            }
            if (skip_num == num && skip_num >= 3) {
                tags.push('多次跳过')
            } else if (right_num == 0) {
                tags.push('还未对过')
            } else if (state_num >= 3) {
                if (last_miss) {
                    tags.push('连续错误')
                } else {
                    tags.push('最近全对')
                }
            }
            if (right_num >= 1 && miss_num >= 2 * right_num) {
                tags.push('易错题');
            }
            if (last_meet_time - app.get_timestamp2() < week_delta) {
                if (last_meet == STATE_RIGHT) {
                    tags.push('最近做对');
                } else if (last_meet == STATE_WRONG) {
                    tags.push('最近做错');
                }
            }
            return tags

        },
        getQuestionTag: function () {
            
            var tags = [];
            if (this.examNo == null || this.nowQuestion == null) {
                this.setData({
                    tags: tags
                });
                return false;
            }
            if (this.data.isShowAnswer == true) {
                // 查看答案情况 保持原有
                return true;
            }
            var nowQuestion = this.nowQuestion;
            var examNo = this.examNo;
            var that = this;
            wx.request2({
                url: '/exam/training/tags?exam_no=' + examNo + '&question_no=' + nowQuestion.question_no,
                method: 'GET',
                success: res => {
                    var res_data = res.data;
                    if (res_data.status != true) {
                        tags = [];
                    } else if (res_data.data.item == undefined) {
                        tags = [];
                    } else {
                        if (res_data.data.tags !== undefined) {
                            tags = res_data.data.tags;
                        } else {
                            tags = that.calcTags(res_data.data.item);
                        }
                    }
                    
                    that.setData({
                        tags: tags
                    });
                },
                fail: function () {
                    that.setData({
                        tags: []
                    });
                }
            })
        },
        choseItem: function (e) {
            if (this.data.mode == 'answer-show') {
                return false;
            }
            var options = this.nowQuestion.options;
            var choseIndex = parseInt(e.currentTarget.dataset.choseitem);
            if (this.data.multiOpts) {
                var selectedOpts = this.data.selectedOpts;
                var _i = this.data.selectedOpts.indexOf(choseIndex);
                if (_i >= 0) {
                    options[choseIndex]["class"] = "noChose";
                    selectedOpts.splice(_i, 1);
                } else {
                    options[choseIndex]["class"] = "chose";
                    selectedOpts.push(choseIndex);
                }
                var showConfirm = selectedOpts.length >= 2 ? true : false;
                this.setData({
                    options: options,
                    selectedOpts: selectedOpts,
                    showConfirm: showConfirm
                })
                return false;
            } else {
                
                for (var index=0;index<options.length;index++) {
                    options[index]["class"] = "noChose";
                }
                options[choseIndex]["class"] = "chose";
                var selectedOpts = [choseIndex];
                this.setData({
                    selectedOpts: selectedOpts,
                    showConfirm: false
                })
                return this.confirmAnswer(options);
            }

        },
        confirmAnswer: function (options) {
            if(options instanceof Array){
                
            }else{
                // 可能是事件触发传过来 event 因此不能用
                options = this.data.options;
            }
            var selectedOpts = this.data.selectedOpts.sort();
            var choseRight = true;
            for (var i = 0, l = options.length; i < l; i++) {
                if (parseInt(options[i]["score"]) > 0) {
                    if (options[i]["class"] != "chose") {
                        if(this.data.mode != 'answer'){
                            options[i]["class"] = "chose";
                        }
                        // TODO 是否区分 用户是否选择
                        choseRight = false;
                    }
                } else if (options[i]["class"] == "chose") {
                    // 用户选错了 如果是answer模式，errorChoseCls会变成chose
                    options[i]["class"] = this.data.erroChoseCls;
                    choseRight = false;
                }
            }
            this.setData({
                options: options
            });
            var eventOptions = {};
            var eventDetail = {
                'selectedOpts': selectedOpts,
                'rightOpts': this.data.rightOpts,
                'choseRight': choseRight
            };
			var event = {'detail': eventDetail};
            this.choseOption(event)
        },
        showAnswerAction: function () {
            
            var selectedOpts = this.data.selectedOpts;
            var selectedOption = '';
            for (var i = 0, l = selectedOpts.length; i < l; i++) {
                selectedOption += app.globalData.optionChar[selectedOpts[i]];
            }
            if (selectedOption.length <= 0) {
                selectedOption = '未选择';
            }
            this.setData({
                selectedOption: selectedOption
            })
        },
        previewImage: function (event) {
            var src = event.currentTarget.dataset.src; //获取data-src
            src += '?r=' + Math.random();
            //图片预览
            wx.previewImage({
                current: src, // 当前显示图片的http链接
                urls: [src], // 需要预览的图片http链接列表
                fail: function (e) {
                    console.info("preview fail");
                },
                complete: function (e) {
                    console.info("preview complete");
                }
            })

        },
		// 原有mp-question 里的方法 end
	}
}
</script>
<style>
	page{
		height: 100%;
	}

	.pageContent{
		height: 100%;
	}
	.page {
		font-family: 'PingFang SC',
						'Helvetica Neue',
						Helvetica,
						'Droid Sans Fallback',
						'Microsoft Yahei',
						sans-serif;
		height: auto;
		/* background: rgb(255, 255, 255); */
		margin: 7px 7px 0px 7px;
		position: relative;
		z-index: 2;
		min-height: 90%;
		/* height: 100%; */
	}

	.top {
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: space-around;
		padding: 7px 0px 7px 50px;
		border-bottom: 0.5px solid #5d5d5d;
		font-size: 16px;
		
	}

	.middle {
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: space-around;
		padding: 7px 0px 7px 0px;
	}

	/* .top view {
	padding: 5px 10px 5px 10px;
	border-radius: 7px;
	} */

	.content {
		font-size: 16px;
	}

	.item {
		margin-bottom: 7px;
		font-size: 16px;
		margin: 10px;
	}

	.line {
		margin-top: 50px;
		display: flex;
		border-bottom: 0px solid #5d5d5d;
		align-items: center;
		justify-content: space-around;
		z-index: 8;
		margin-bottom: 30px;
	}

	.showAnswer {
		font-size: 16px;
		padding: 5px 10px 5px 10px;
		border: 0px solid #5d5d5d;
		border-radius: 7px;
		margin-bottom: -16px;
		z-index: 9;
		background-color: #fff;
	}

	.switch {
		font-size: 20px;
		text-align: center;
		width: 33%;
		line-height: 48px;
		height: 48px;
	}

	.switchtext {
		font-size: 20px;
		text-align: center;
		line-height: 48px;
		height: 48px;
	}

	.bottom {
		width: 100%;
		font-size: 14px;
		position: fixed;
		bottom: 0px;
		background-color: #fff;
		height: 50px;
		min-height: 50px;
		border-top: 1px solid #c9c9d8;
		display: flex;
		align-items: center;
		justify-content: space-around;
		z-index: 10;
	}
	.top-title {
		text-align: center;
		width: 90%;
	}

	.icon {
		float: right;
		height: 25px;
		width: 25px;
	}
	.dialog{
        height:200px;
        width:85%;
        border: 1px solid #ccc;
        background-color:#fff;
    }
	.feedback-type{
		width: 100%;
		font-size: 18px;
		background-color: white;
		/* background-color: transparent; */
		margin-top: 10px;
		margin-bottom: 15px;
	}
	.fd-type-picker{
		width: 100%;
	}
	.fb-type-k {
		width: 35%;
		font-weight: bold;
		/* padding-right: 5px; */
		display: inline-block;
	}

	.fb-type-v {
		width: 65%;
		text-align: center;
		background-color: white;
		/* padding-left: 10px; */
		/* padding-right: 10px; */
		padding-top: 10px;
		padding-bottom: 10px;
		display: inline-block;
	}

	.fb-desc{
		font-size: 18px;
		background-color: white;
		width: 100%;
	}


	/* 推广信息 样式 */
	.ad-modal {
		position: fixed;
		display: block;
		width: 100%;
		height: 100%;
		left: 0;
		top: 0;
		background-color: rgba(0, 0, 0, 0.3);
		z-index: 100;
		justify-content: center;
		align-items: center;
	}

	.ad {
		position: fixed;
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
		margin: auto;
		background-color: white;
		width: 90%;
		height: 90%;
	}

	.ad-content{
		/* margin: 0 auto;  左右居中 */
		width: 94%;
		position: absolute;
		left: 3%;
		top: 15px;
		bottom: 50px;
		border-style: solid;
		border-width: 1px;
		border-color: gray;
		overflow-y: scroll;
	}

	.ad-btn-view{
		position: absolute;
		bottom: 0px;
		right: 0px;
		height: 50px;
		line-height: 50px;
		display: flex;
	}

	.ad-btn {
		margin-right: 15px;
	}
	.ad-btn checkbox{
		transform: scale(0.8,0.8);
		width: 25px;
	}

	/* 原有mp-quesiton 样式*/
	.div {
		display: flex; 
  		flex-direction: row;
		flex-wrap: wrap;
	}
	.view-tag {
		margin-top: 7px;
		margin-bottom: 7px;
	}
	.tag {
		/* border:1px solid; */
		border-radius:7px;
		margin-left: 5px;
		padding-left: 7px;
		padding-right: 7px;
		padding-top: 6px;
		padding-bottom: 6px;
		background-color: #FFBB77	;
	}
	.noChose {
		display: flex; 
  		flex-direction: row;
		flex-wrap: wrap;
		background-color: #f0f5fb;
        height: auto;
		/* min-height: 35px; */
		line-height: 35px;
		font-size: 15px;
		margin: 10px 10px 10px 10px;
		padding-left: 10px;
		padding-top: 5px;
		padding-bottom: 5px;
		color: #363637;
		border-radius: 2.5px;
	}
	
	.chose {
		display: flex; 
  		flex-direction: row;
		flex-wrap: wrap;
		background-color: #fff;
		/* DodgerBlue  */
		color: #1E90FF; 
		border: 1px #1E90FF solid;
		line-height: 35px;
		font-size: 15px;
		margin: 10px 10px 10px 10px;
		padding-left: 10px;
		padding-top: 5px;
		padding-bottom: 5px;
		border-radius: 2.5px;
	}

	.errorChose {
		display: flex; 
  		flex-direction: row;
		flex-wrap: wrap;
		background-color: #fff;
		color: #f01212;
		border: 1px #f01212 solid;
		line-height: 34px;
		font-size: 15px;
		margin: 10px 10px 10px 10px;
		padding-left: 10px;
		padding-top: 5px;
		padding-bottom: 5px;
		border-radius: 2px;
	}

	.btn-warn{
		margin-top: 20px;
		margin-bottom: 15px;
		margin-left: 20px;
		/* border: solid 0px ; */
		color: black;
		background-color: #dec674;
		text-align: center;
		padding: 5px;
		width: 75px;
	}

	.analysis{
		margin-top: 10px;
		/* height: 100%; */
		/* height: 100px; */
	}

	.deepskyblue {
		color: 	#00BFFF;
	}
	/* 测试模式下 */
	.center {
		display: flex;
		flex-direction: column;
		/* margin-left: 1%; */
		width: 100%;
		height: 125px;
		/* line-height: 125px; */
		text-align: center;
		justify-content: center;
		align-items: center;
		/* margin-top: 15px;
		margin-bottom: 15px; */
		padding: 0;
		background-color: white;
	}

	.score {
		height: 75px;
		line-height: 75px;
		font-size: 30px;
		color: red;
	}

	.detail{
		display: flex;
		flex-direction: column;
		margin-left: 1%;
		width: 98%;
		padding-top: 15px;
		padding-bottom: 25px;
		background-color: white;
	}

	.label-detail {
		font-size: 15px;
		color: yellowgreen;
		border-bottom: 0px solid #9ad4fc;
		padding-bottom: 10px;
		text-align: center;
	}

	.item {
		width: 25px;
		height: 25px;
		color: white;
		text-align: center;
		border-radius: 100px;
		background-color: mediumturquoise;
		justify-content: center;
		display: flex;
		align-items: center;
		margin-top: 15px;
	}

	.bg-right {
		width: 25px;
		height: 25px;
		color: white;
		text-align: center;
		border-radius: 100px;
		justify-content: center;
		display: flex;
		align-items: center;
		margin-top: 15px;

		background-color: #9ad4fc;
		border: 2px #9ad4fc solid;
	}

	.bg-error {
		width: 25px;
		height: 25px;
		color: white;
		text-align: center;
		border-radius: 100px;
		justify-content: center;
		display: flex;
		align-items: center;
		margin-top: 15px;

		background-color: #fc9a9a;
		border: 2px #fc9a9a solid;
	}
	.row {
		width: 100%;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: space-around;
	}
	.color-white {
		color: white;
	}
	.width100p {
		width: 100%;
	}
	.bottomShow {
		font-size: 20px;
		text-align: center;
		/* width: 33%; */
		line-height: 48px;
		height: 48px;
	}
</style>